Index: routers/GruppeARouter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const GruppeAService = require('../system/GruppeAService');\nconst UserService = require('../system/UserService');\n\nconst router = module.exports = exports = express.Router();\n\n/**\n * Creates a new progress\n *\n * @security  AppKeyAuth, TokenAuth\n *\n * @body*  {Object}  Progress object that needs to be created\n *    {\n *\n *    }\n *\n * @response  {201}  Object successfully created\n * @return  CreateResponse\n *    {\n *      \"module_id\": 1\n *    }\n *\n * @response  {405}  Invalid input\n */\nrouter.post('/groupA/progress', AppKeyAuth, TokenAuth, _(async function(req, res) {\n    const progress = req.body;\n    const userId = req.currentUser.id;\n\n    if(\n        !progress ||\n        !progress.module_id ||\n        !progress.level\n    ) {\n        return res.status(405).end('Invalid inputA');\n    }\n\n    const affectedRows = await GruppeAService.createProgress(userId, progress);\n    if(affectedRows == 0)\n        return res.status(405).end('Invalid inputB');\n\n    res.status(201).json({\n\n    });\n}));\n\n/**\n * Updates an existing progress\n * This can only be done if this is your question or you have manager rights\n *\n * @security  AppKeyAuth, TokenAuth\n *\n * @path*  {integer}  userId  ID of progress to update\n *\n * @body*  {Object}  progress object\n *    {\n *      \"level\":                2,\n *      \"exp\":                  33,\n *      \"reached_milestones\":   2\n *    }\n *\n * @response  {200}  Object successfully updated\n * @response  {400}  Invalid ID supplied\n * @response  {403}  Forbidden\n * @response  {404}  Object not found\n * @response  {405}  Invalid input\n */\nrouter.put('/groupA/progress', AppKeyAuth, TokenAuth, _(async function(req, res) {\n    const userId = req.currentUser.id;\n    const data = req.body;\n\n    if(\n        !data ||\n        !data.module_id\n    ) {\n        return res.status(405).end('Invalid inputA');\n    }\n\n    if(!userId || userId < 1)\n        return res.status(400).end('Invalid ID supplied');\n\n    let changes = 0;\n    const update = {};\n\n    if(data.level) {\n        update.level = data.level;\n        changes++;\n    }\n\n    if (data.exp) {\n        update.exp = data.exp;\n        changes++;\n    }\n\n    if (data.reached_milestones) {\n        update.reached_milestones = data.reached_milestones;\n        changes++;\n    }\n\n    if(!changes)\n        return res.status(405).end('Invalid input');\n\n\n\n    const status = await GruppeAService.updateProgress(userId, update);\n\n    switch(status) {\n        case 200: res.end('Object successfully updated');  break;\n        case 403: res.status(403).end('Forbidden');        break;\n        case 404: res.status(404).end('Object not found'); break;\n        default:\n            res.sendStatus(status);\n    }\n}));\n\n/**\n * Updates an existing progress\n * This can only be done if this is your progress or you have manager rights\n *\n * @security  AppKeyAuth, TokenAuth\n *\n * @path*  {integer}  userId  ID of progress to update\n *\n * @body*  {Object}  progress object\n *    {\n *      \"level\":                2,\n *      \"exp\":                  33,\n *      \"reached_milestones\":   2\n *    }\n *\n * @response  {200}  Object successfully updated\n * @response  {400}  Invalid ID supplied\n * @response  {403}  Forbidden\n * @response  {404}  Object not found\n * @response  {405}  Invalid input\n */\nrouter.put('/groupA/progress/overAllLevel', AppKeyAuth, TokenAuth, _(async function(req, res) {\n    const userId = req.currentUser.id;\n    const data = req.body;\n\n    if(\n        !data\n    ) {\n        return res.status(405).end('Invalid inputA');\n    }\n\n    if(!userId || userId < 1)\n        return res.status(400).end('Invalid ID supplied');\n\n    let changes = 0;\n    const update = {};\n\n    if(data.level) {\n        update.level = data.level;\n        changes++;\n    }\n\n    if (data.exp) {\n        update.exp = data.exp;\n        changes++;\n    }\n\n    if (data.reached_milestones) {\n        update.reached_milestones = data.reached_milestones;\n        changes++;\n    }\n\n    if(!changes)\n        return res.status(405).end('Invalid input');\n\n\n\n    const status = await GruppeAService.updateOverAll(userId, update);\n\n    switch(status) {\n        case 200: res.end('Object successfully updated');  break;\n        case 403: res.status(403).end('Forbidden');        break;\n        case 404: res.status(404).end('Object not found'); break;\n        default:\n            res.sendStatus(status);\n    }\n}));\n\n/**\n * Get the topTen\n * Returns an question array of all my progress\n *\n * @security  AppKeyAuth, TokenAuth\n *\n * @response  {200}  Successful operation\n * @return  ranking\n *    [\n *       {\n *           \"user_id\": 4,\n *           \"level\": 5,\n *           \"exp\": 0\n *       },\n *       {\n *           \"user_id\": 6,\n *           \"level\": 3,\n *           \"exp\": 0\n *       },\n *       {\n *           \"user_id\": 3,\n *           \"level\": 2,\n *           \"exp\": 33\n *       },\n *       {\n *           \"user_id\": 2,\n *           \"level\": 2,\n *           \"exp\": 12\n *       },\n *       {\n *           \"user_id\": 1,\n *           \"level\": 2,\n *           \"exp\": 5\n *       },\n *       {\n *           \"user_id\": 5,\n *           \"level\": 1,\n *           \"exp\": 0\n *       }\n *   ]\n */\nrouter.get('/groupA/progress', AppKeyAuth, _(async function(req, res) {\n\n    res.json(await GruppeAService.getTopTen());\n}));\n\n/**\n * Gets all level\n *\n * @security  AppKeyAuth, TokenAuth\n *\n * @body*  {Object}\n *    {\n *\n *    }\n *\n * @response  {201}  Object successfully created\n * @return  CreateResponse\n *    {\n *      \"module_id\": 1,\n *      \"level\": 4\n *    }\n *\n * @response  {405}  Invalid input\n */\nrouter.post('/groupA/progress/allLevel', AppKeyAuth, TokenAuth, _(async function(req, res) {\n    const userId = req.currentUser.id;\n    res.json(await GruppeAService.getAllLevel(userId));\n}));\n\n/**\n * Gets overall level\n *\n * @security  AppKeyAuth, TokenAuth\n *\n * @body*  {Object}\n *    {\n *\n *    }\n *\n * @response  {201}  Object successfully created\n * @return  CreateResponse\n *    {\n *      \"level\": 4\n *    }\n *\n * @response  {405}  Invalid input\n */\nrouter.post('/groupA/progress/overAllLevel', AppKeyAuth, TokenAuth, _(async function(req, res) {\n    const userId = req.currentUser.id;\n    res.json(await GruppeAService.getOverAllLevel(userId));\n}));\n\n/**\n * Creates a new firebase entry\n *\n * @security  AppKeyAuth, TokenAuth\n *\n * @body*  {Object}  firebase object that needs to be created\n *    {\n *          \"token\": \"6a7c1f6f4c54cf24edc9b3587e40708c\"\n *    }\n *\n * @response  {201}  Object successfully created\n * @return  CreateResponse\n *    {\n *\n *    }\n *\n * @response  {405}  Invalid input\n */\nrouter.post('/groupA/firebase', AppKeyAuth, TokenAuth, _(async function(req, res) {\n    const firebase = req.body;\n    const userId = req.currentUser.id;\n\n    if(\n        !firebase\n    ) {\n        return res.status(405).end('Invalid inputA');\n    }\n\n    const affectedRows = await GruppeAService.createFirebase(userId, firebase);\n    if(affectedRows == 0)\n        return res.status(405).end('Invalid inputB');\n\n    res.status(201).json({\n\n    });\n}));\n\n/**\n * Gets all the possible duel opponents\n * Returns an array of all my opponents\n *\n * @security  AppKeyAuth, TokenAuth\n *\n * @response  {200}  Successful operation\n * @return  ranking\n * [\n *   {\n *       \"nickname\": \"m1\",\n *       \"token\": \"6b7c1f6f4c54cf24edc9b3587e407745\"\n *   },\n *   {\n *       \"nickname\": \"mb\",\n *       \"token\": \"6a7c1f6f4c54cf24edc9b3587e40708c\"\n *   }\n * ]\n */\nrouter.get('/groupA/firebase', AppKeyAuth, TokenAuth, _(async function(req, res) {\n    const userId = req.currentUser.id;\n    res.json(await GruppeAService.getFirebase(userId));\n}));
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- routers/GruppeARouter.js	(revision 09f4f3f81d139be796aa94a653e9c7c92b59c4dd)
+++ routers/GruppeARouter.js	(revision )
@@ -66,6 +66,7 @@
 router.put('/groupA/progress', AppKeyAuth, TokenAuth, _(async function(req, res) {
     const userId = req.currentUser.id;
     const data = req.body;
+    let moduleId = data.module_id;
 
     if(
         !data ||
@@ -100,7 +101,7 @@
 
 
 
-    const status = await GruppeAService.updateProgress(userId, update);
+    const status = await GruppeAService.updateProgress(userId, moduleId, update);
 
     switch(status) {
         case 200: res.end('Object successfully updated');  break;
Index: system/GruppeAService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\n * Creates a progress\n *\n * @param   {Number}  userId        The creator\n * @param   {Object}  progressData  The question data\n * @return  {Number|false}          The new question id or false on fail\n */\nexports.createProgress = async function(userId, progressData) {\n\n    // insert progress\n    let data = {\n        module_id:          progressData.module_id,\n        user_id:            userId,\n        status:             1,\n        level:              progressData.level,\n        exp:                0,\n        reached_milestones: 0\n    };\n    let [err, res] = await db.query('INSERT INTO modules_user_rel SET ?', data);\n    if(err) throw err;\n    return res.affectedRows;\n}\n\n/**\n * Updates a progress\n *\n * @param   {Number}  userId      The changer\n * @param   {Object}  data        The progress data to change\n * @return  {Number}              The status of the success\n */\nexports.updateProgress = async function(userId, data) {\n    [err] = await db.query('UPDATE modules_user_rel SET ? WHERE user_id = ?', [data, userId]);\n    if(err) throw err;\n\n    return 200;\n}\n\n/**\n * Updates overAll module\n *\n * @param   {Number}  userId      The changer\n * @param   {Object}  data        The progress data to change\n * @return  {Number}              The status of the success\n */\nexports.updateOverAll = async function(userId, data) {\n    [err] = await db.query('UPDATE modules_user_rel SET ? WHERE user_id = ? and module_id = 100', [data, userId]);\n    if(err) throw err;\n\n    return 200;\n}\n\n/**\n * Gets all the questions which creator is the given user\n *\n * @param   {Number}  userId  The question creator\n * @return  {Array}           The question array\n */\nexports.getTopTen = async function() {\n    const [err, res] = await db.query('SELECT nickname, level, exp FROM modules_user_rel INNER JOIN user on id = user_id WHERE module_id = 100 ORDER BY level DESC, exp DESC LIMIT 10');\n    if(err) throw err;\n    return res;\n}\n\n/**\n * Gets all level\n *\n * @param   {Number}  userId        The creator\n * @return  {Array}   moduleIds plus level\n */\nexports.getAllLevel = async function(userId) {\n    let [err, res] = await db.query('SELECT module_id, level, exp from modules_user_rel WHERE user_id = ? and module_id != 100', userId);\n    if(err) throw err;\n    return res;\n}\n\n/**\n * Gets overall level\n *\n * @param   {Number}  userId        The creator\n * @return  {Array}   Your overall level\n */\nexports.getOverAllLevel = async function(userId) {\n    let [err, res] = await db.query('SELECT level from modules_user_rel WHERE user_id = ? and module_id = 100', userId);\n    if(err) throw err;\n    return res;\n}\n\n/**\n * Creates a firebase\n *\n * @param   {Number}  userId        The creator\n * @param   {Object}  firebaseData  The firebase data\n * @return  {Number|false}          The new question id or false on fail\n */\nexports.createFirebase = async function(userId, firebaseData) {\n\n    // insert firebase\n    let data = {\n        user_id:            userId,\n        token:              firebaseData.token\n    };\n\n    let [err, res] = await db.query('INSERT INTO firebase SET ?', data);\n    if(err) throw err;\n\n    return res.affectedRows;\n}\n\n/**\n * Gets all the possible duel opponents\n *\n * @return {Array} The opponent array\n */\nexports.getFirebase = async function(user_id) {\n    const [err, res] = await db.query('SELECT nickname, token FROM firebase INNER JOIN user on id = user_id WHERE user_id != ?', user_id);\n    if(err) throw err;\n    return res;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- system/GruppeAService.js	(revision 09f4f3f81d139be796aa94a653e9c7c92b59c4dd)
+++ system/GruppeAService.js	(revision )
@@ -28,8 +28,8 @@
  * @param   {Object}  data        The progress data to change
  * @return  {Number}              The status of the success
  */
-exports.updateProgress = async function(userId, data) {
-    [err] = await db.query('UPDATE modules_user_rel SET ? WHERE user_id = ?', [data, userId]);
+exports.updateProgress = async function(userId, moduleId, data) {
+    [err] = await db.query('UPDATE modules_user_rel SET ? WHERE user_id = ? AND module_id = ?', [data, userId, moduleId]);
     if(err) throw err;
 
     return 200;
